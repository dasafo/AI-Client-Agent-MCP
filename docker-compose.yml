# docker-compose.yml
# Docker Compose configuration file
# Defines the services, networks, and volumes needed to run the application

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_client_agent_app
    ports:
      - "${SERVER_PORT:-8000}:${SERVER_PORT:-8000}" # Uses SERVER_PORT from .env, or 8000 as fallback
    volumes:
      - ./backend:/app/backend # Live development mount
      - ./app_logs:/app/logs   # Maps a local directory for app logs
      - ./pyproject.toml:/app/pyproject.toml:ro # Mount pyproject.toml as read-only
      - ./README.md:/app/README.md:ro # Mount README.md as read-only
    env_file:
      - .env # Loads all variables from .env
    environment:
      # DATABASE_URL for reference or if any part of the app parses it directly.
      # The main connection will use DB_HOST, DB_PORT, etc. which are read by get_db_connection_params.
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}
      DB_HOST: db # Overrides DB_HOST to point to the 'db' service in Docker
      SERVER_HOST: 0.0.0.0 # Ensures mcp.run() in server.py listens on all interfaces inside the container
      # DB_PORT, DB_USER, DB_PASSWORD, DB_NAME are taken from .env and are correct for internal connection.
      PYTHONUNBUFFERED: 1 # Disables Python output buffering
      # SERVER_HOST and SERVER_PORT for the app are controlled by the CMD in the Dockerfile (0.0.0.0:8000)
    depends_on:
      db:
        condition: service_healthy # Waits for the database service to be ready
    networks:
      - app_network

  # PostgreSQL database service
  db:
    image: postgres:15-alpine
    container_name: ai_client_agent_db
    ports:
      - "5433:5432" # Exposes the DB port from Docker to port 5433 on the host
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistent volume for PostgreSQL data
      - ./database/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql # Script to initialize the DB
      - ./database/managers.sql:/docker-entrypoint-initdb.d/managers.sql # Script to initialize the DB
    environment:
      POSTGRES_USER: ${DB_USER} # Taken from .env
      POSTGRES_PASSWORD: ${DB_PASSWORD} # Taken from .env
      POSTGRES_DB: ${DB_NAME} # Taken from .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # PostgreSQL administration service
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai_client_agent_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin # Persistent volume for pgAdmin data
    networks:
      - app_network
    depends_on:
      - db

# Definition of persistent volumes
volumes:
  postgres_data: # Stores PostgreSQL data
  pgadmin_data: # Stores pgAdmin data

# Definition of networks
networks:
  app_network:
    driver: bridge # Uses the bridge driver for container communication 